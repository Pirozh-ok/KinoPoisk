// <auto-generated />
using System;
using KinoPoisk.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KinoPoisk.DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208084437_Added columns for refresh token")]
    partial class Addedcolumnsforrefreshtoken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AgeCategoryMovie", b =>
                {
                    b.Property<Guid>("AgeCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgeCategoriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("AgeCategoryMovie");
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CountryMovie");
                });

            modelBuilder.Entity("CreatorMovieMovieRole", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorMoviesCreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorMoviesMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "CreatorMoviesCreatorId", "CreatorMoviesMovieId");

                    b.HasIndex("CreatorMoviesCreatorId", "CreatorMoviesMovieId");

                    b.ToTable("CreatorMovieMovieRole");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.AgeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MinAge")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65fdddb2-3dcc-4fac-9556-78378f426008"),
                            MinAge = 0L,
                            Value = "0+ - All ages are allowed"
                        },
                        new
                        {
                            Id = new Guid("c1df7a0b-aba7-4a2e-95b2-ad9ceef6e560"),
                            MinAge = 6L,
                            Value = "6+ - For children over 6 years"
                        },
                        new
                        {
                            Id = new Guid("38d6fec5-be63-4af3-8418-b50d51d2cd67"),
                            MinAge = 12L,
                            Value = "12+ - For children over 12 years"
                        },
                        new
                        {
                            Id = new Guid("d1fce3be-d391-4cb4-9db4-63daee28e4c7"),
                            MinAge = 16L,
                            Value = "16+ - For children over 16 years"
                        },
                        new
                        {
                            Id = new Guid("fcfc9660-4dbc-446a-84fd-20037cbce02f"),
                            MinAge = 18L,
                            Value = "18+ - Prohibited for children"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("170595fd-351f-4dce-8853-509d80583bab"),
                            ConcurrencyStamp = "8d63b8b7-894a-4048-a192-35096b0fda55",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("725f57ea-80d1-442a-882b-ad071939a180"),
                            ConcurrencyStamp = "e53b8cce-bc10-41ef-a5da-d1da2953d735",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfAward")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5c29296-0529-4370-8a9a-57fccbf90552"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("d627d876-d9e0-4ccd-94f8-49f97648500d"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("cde0253c-6c99-4be0-8285-c40315ba6064"),
                            Name = "England"
                        },
                        new
                        {
                            Id = new Guid("d0688d74-3ce5-457d-a998-f109868cf76d"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("045f432e-d5d7-4f94-8db4-770bce355500"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("7898f2fc-8646-465a-8739-4d2f6ccf870d"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("aeb1d392-9b9a-46ef-a900-c26f9a4af3c3"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("0b14d538-d52a-48c9-b1d9-89fc6ca3b748"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("a7c45f5b-0e6a-4700-a52f-ad948230deda"),
                            Name = "Finlyadnia"
                        },
                        new
                        {
                            Id = new Guid("e861cd7b-a863-41e3-b3e0-d59b3825f09e"),
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Creator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.CreatorMovie", b =>
                {
                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CreatorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CreatorsMovies");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d795da17-4f24-4a5f-852c-af9aa9647779"),
                            Name = "Horror movie"
                        },
                        new
                        {
                            Id = new Guid("5b8cc811-55d1-4a96-ae15-2ae40999c386"),
                            Name = "Action movie"
                        },
                        new
                        {
                            Id = new Guid("de8fd322-0882-49a4-b234-d7ad72509ce1"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("4d018027-18dd-48e6-af0f-8471b0bcae22"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("6b644c48-b296-42e6-b455-7a9bcc052019"),
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("dc493bb6-d591-4603-bce7-b6b7687233be"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("0642d454-0cb4-4442-9dee-22ca75927679"),
                            Name = "Kids"
                        },
                        new
                        {
                            Id = new Guid("196bcf84-d8e5-4349-bcae-f91f499c6ecf"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("b2d87c91-fdc3-4911-bfbb-3349ab29dc81"),
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = new Guid("babd7e13-e056-49df-b291-e6c1d03a59f4"),
                            Name = "War Film"
                        },
                        new
                        {
                            Id = new Guid("620618ad-89ad-4f5c-ad0e-e09dfe12bc20"),
                            Name = "Musical"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BudgetInDollars")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<long>("DurationInMinutes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PremiereDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("WorldFeesInDollars")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.MovieRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MovieRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09ddb2aa-6b25-4dd6-9bd3-6733932f7eef"),
                            Name = "Director"
                        },
                        new
                        {
                            Id = new Guid("4e9a40b6-96e5-4de7-a244-40774d4f657b"),
                            Name = "Actors"
                        },
                        new
                        {
                            Id = new Guid("23db4b99-25be-4af5-a606-26d923e9f782"),
                            Name = "Composer"
                        },
                        new
                        {
                            Id = new Guid("8de2cc72-4a24-418b-b7d0-0efb5e446623"),
                            Name = "ScreenWriters"
                        },
                        new
                        {
                            Id = new Guid("3d563182-85b9-4699-90d7-28aa9cb1e376"),
                            Name = "Producers"
                        },
                        new
                        {
                            Id = new Guid("efaa5603-7345-45d4-a04c-049d059d77dd"),
                            Name = "Artists"
                        },
                        new
                        {
                            Id = new Guid("faaf0f5f-7df8-43ce-ab46-eedf178d8737"),
                            Name = "Operators"
                        },
                        new
                        {
                            Id = new Guid("c989e28f-8492-499a-9d9c-ba2785a1294f"),
                            Name = "Director"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Rating", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<long>("MovieRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("AgeCategoryMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.AgeCategory", null)
                        .WithMany()
                        .HasForeignKey("AgeCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatorMovieMovieRole", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.MovieRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.CreatorMovie", null)
                        .WithMany()
                        .HasForeignKey("CreatorMoviesCreatorId", "CreatorMoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUser", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Award", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Awards")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Content", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Content")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.CreatorMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Creator", "Creator")
                        .WithMany("CreatorsMovies")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Creators_Movies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Rating", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", "User")
                        .WithMany("MovieRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("MovieRatings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Creator", b =>
                {
                    b.Navigation("CreatorsMovies");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Movie", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Content");

                    b.Navigation("Creators_Movies");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
