// <auto-generated />
using System;
using KinoPoisk.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KinoPoisk.DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AgeCategoryMovie", b =>
                {
                    b.Property<Guid>("AgeCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgeCategoriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("AgeCategoryMovie");
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CountryMovie");
                });

            modelBuilder.Entity("CreatorMovieMovieRole", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorMoviesCreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorMoviesMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "CreatorMoviesCreatorId", "CreatorMoviesMovieId");

                    b.HasIndex("CreatorMoviesCreatorId", "CreatorMoviesMovieId");

                    b.ToTable("CreatorMovieMovieRole");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.AgeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MinAge")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("251a718f-4bef-481b-89c4-e2093030d142"),
                            MinAge = 0L,
                            Value = "0+ - All ages are allowed"
                        },
                        new
                        {
                            Id = new Guid("eaa6833b-4aa9-4c18-9f9a-bf3380658606"),
                            MinAge = 6L,
                            Value = "6+ - For children over 6 years"
                        },
                        new
                        {
                            Id = new Guid("0a98ce7f-6ef6-4fab-bbc6-225387b883be"),
                            MinAge = 12L,
                            Value = "12+ - For children over 12 years"
                        },
                        new
                        {
                            Id = new Guid("b13a83d8-553f-4f4a-a429-304517e7710a"),
                            MinAge = 16L,
                            Value = "16+ - For children over 16 years"
                        },
                        new
                        {
                            Id = new Guid("94c0fe0e-eb9b-4e95-83c1-971f707e873e"),
                            MinAge = 18L,
                            Value = "18+ - Prohibited for children"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20864e9c-a5ee-45a2-84a9-8a7101adf6fb"),
                            ConcurrencyStamp = "8d632565-bdc3-47e4-be4f-aedc3e087aa4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("640e42be-3780-49c8-9770-1d4c11157c35"),
                            ConcurrencyStamp = "10f3c1dc-8a9b-458f-990d-d19fea9dbd0c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfAward")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b86e95ba-d651-4bd6-90e6-25c0283e8962"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("45247b2e-ac4d-4687-92e3-20844991183c"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("a9300d50-bc04-44c6-9df7-b081a710a785"),
                            Name = "England"
                        },
                        new
                        {
                            Id = new Guid("bb4fbba6-e41d-4c68-beb1-e2ce6a114db6"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("d64fb6b6-6ea3-4bf7-a160-9014980e0fec"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("243890f0-5c40-458d-b0c5-2c879b157e1a"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("0c1ddc4c-479c-4ac5-a3f3-12f5e2920958"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("87b545b1-9b6f-4060-8c76-e198be91e794"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("4b5ea6ae-033e-4b2c-9b7d-79fc48065d2f"),
                            Name = "Finlyadnia"
                        },
                        new
                        {
                            Id = new Guid("cbaeacef-09ea-49c7-9bd3-34f86a94d448"),
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Creator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.CreatorMovie", b =>
                {
                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CreatorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CreatorsMovies");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89c89f2d-6d53-4def-8d22-08d3dd610d81"),
                            Name = "Horror movie"
                        },
                        new
                        {
                            Id = new Guid("45eaee16-19eb-438d-b875-7026734170f8"),
                            Name = "Action movie"
                        },
                        new
                        {
                            Id = new Guid("ac62cd3e-f26b-4097-bf4a-eb95c8b2e75b"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("bb1da9dd-ef28-4303-845d-7f8e3fea431d"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("9e044226-d12a-49da-b88c-3a8352102b9e"),
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("55ca4556-bde1-43b8-8bcd-14ab0f147b1c"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("a43bcc7f-9140-48d2-b0bc-1d61cb4e4e7e"),
                            Name = "Kids"
                        },
                        new
                        {
                            Id = new Guid("1f95b0b9-9222-468e-809c-e9d8da0fc4ab"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("f4adef93-0c35-4cb7-8c7b-5b6e76bfdeb0"),
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = new Guid("09332cfb-3be1-4960-97c1-9307e76a2f68"),
                            Name = "War Film"
                        },
                        new
                        {
                            Id = new Guid("38e7f467-e824-4468-b9d7-e81a9dcb9f36"),
                            Name = "Musical"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BudgetInDollars")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<long>("DurationInMinutes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PremiereDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("WorldFeesInDollars")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.MovieRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MovieRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4af1ef6a-f14c-4b60-be43-b0e6d2702f23"),
                            Name = "Director"
                        },
                        new
                        {
                            Id = new Guid("b1594ccf-8957-4b2f-a86e-1a1dc90d3779"),
                            Name = "Actors"
                        },
                        new
                        {
                            Id = new Guid("ce0e23e3-70d5-4643-ad93-85204885ee39"),
                            Name = "Composer"
                        },
                        new
                        {
                            Id = new Guid("a561ccde-0a78-4d27-b257-3bd4cde46465"),
                            Name = "ScreenWriters"
                        },
                        new
                        {
                            Id = new Guid("dc7a4fb2-fbc0-4d43-b5eb-18c5d43fbb48"),
                            Name = "Producers"
                        },
                        new
                        {
                            Id = new Guid("7237d50b-fccf-470b-8bc8-39d18b0c9769"),
                            Name = "Artists"
                        },
                        new
                        {
                            Id = new Guid("e76692d7-83a8-484e-a775-929dbaf855c3"),
                            Name = "Operators"
                        },
                        new
                        {
                            Id = new Guid("c8c0f355-683e-464a-90a3-d8e2ef8a6d5b"),
                            Name = "Director"
                        });
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Rating", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<long>("MovieRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("AgeCategoryMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.AgeCategory", null)
                        .WithMany()
                        .HasForeignKey("AgeCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatorMovieMovieRole", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.MovieRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.CreatorMovie", null)
                        .WithMany()
                        .HasForeignKey("CreatorMoviesCreatorId", "CreatorMoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUser", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Award", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Awards")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Content", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Content")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.CreatorMovie", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Creator", "Creator")
                        .WithMany("CreatorsMovies")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Creators_Movies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Rating", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", "User")
                        .WithMany("MovieRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KinoPoisk.DomainLayer.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("MovieRatings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Creator", b =>
                {
                    b.Navigation("CreatorsMovies");
                });

            modelBuilder.Entity("KinoPoisk.DomainLayer.Entities.Movie", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Content");

                    b.Navigation("Creators_Movies");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
